#pragma once
#include <winsock2.h>
#include <WS2tcpip.h>
#include <Windows.h>
#include <vector>
#include <string>
#include "nlohmann/json.hpp"
#include "cpr/cpr.h"
#include <shlobj.h>
#include "LinkedList.h"
#include "eventdef.h"
#include "api_status.h"
#include "helper.h"
#include "infrastructure.h"
#include "eventparser.h"


#pragma comment (lib, "Ws2_32.lib")

extern Globals g_Struct;

using namespace cpr;

class manager
{
public:
	manager(char* _Server);
	~manager();
	void Stop();
	BOOL CheckExit();
	HANDLE GetFileHandle();
	std::string GetApiEndpoint();
	
	std::vector<DWORD> Errors;
	std::string MonitoredFilePath;
	std::string Server;
	std::string ServerApiEndpoint;
	
private:
	
	static void ManagerThread();
	void ConsumeErrors(std::vector<DWORD>& ErrorVector);	
private:
	BOOL exit;

	

	// ERRORS
	

	// MUTEXES
	HANDLE ErrorsMutex;

	// THREAD HANDLES
	static HANDLE hManagerThread;
	HANDLE hDriverEventConsumerThread;
	HANDLE hAPI_sendThread;
	HANDLE hAPI_recvThread;

	// MONITORED FILE HANDLE
	HANDLE hFile;

};

struct CommandHandler_Info
{
	int connection_sock_fd;
	manager* mgr;
	BYTE* commBuf;
};



void DriverEventConsumerThread(manager* mgr);						// THIS THREAD WILL CONSUME EVENTS GENERATED BY THE DRIVER AND ADD TO EventHead
void API_sendThread(manager* mgr);									// THIS THREAD WILL PARSE EVENTS ADDED TO EventHead AND SEND THEM TO THE SERVER IN JSON FORMAT
void API_recvThread(manager* mgr);									// THIS THREAD WILL LISTEN AND HANDLE COMMANDS INCOMING FROM THE SERVER
void CommandHandler(CommandHandler_Info* _CommandHandlerInfo);

